# vim: ts=4 sw=4 et sts=-1
from itertools import count
from functools import lru_cache as lru, cmp_to_key
b = '''
RRRRIICCFF
RRRRIICCCF
VVRRRCCFFF
VVRCCCJFFF
VVVVCJJCFE
VVIVCCJJEE
VVIIICJJEE
MIIIIIJJEE
MIIISIJEEE
MMMISSJEEE
'''
#b = open('input.txt').read()
b = b.strip()

l = [e for e in b.split('\n')]
l = [    list(e)        for e in l]

X = len(l[0])
Y = len(l)

l2 = [[None]*X for _ in range(Y)]

lut = {}
haslut = set([])

def addlink(v,w):
    if v == w:
        return
    p = min(v,w)
    q = max(v,w)
    if not p in lut:
        lut[p] = []
    lut[p].append(q)
    haslut.add(q)
    if q in lut:
        addlink(p, min(lut[q]))

for y in range(Y-1):
    for x in range(X-1):
        for dx,dy in ([(1,0), (0,1)]):
            nx,ny = x+dx, y+dy
            if l[y][x] != l[ny][nx]:
                continue
            addlink((nx,ny), (x,y))

for y in range(1,Y)[::-1]:
    for x in range(1,X)[::-1]:
        for dx,dy in ([(-1,0), (0,-1)]):
            nx,ny = x+dx, y+dy
            if l[y][x] != l[ny][nx]:
                continue
            addlink((nx,ny), (x,y))

ol = []
i = 0
for p in lut:
    if p in haslut:
        continue
    i += 1
    ol.append(p)

for y,r in enumerate(l):
    s = ''
    for x,c in enumerate(r):
        if (x,y) in ol:
            c = c.lower()
        s += (c)
    print(s)

